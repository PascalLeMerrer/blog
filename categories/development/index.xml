<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Pascal&#39;s dev blog</title>
    <link>https://pascallemerrer.github.io/blog/categories/development/index.xml</link>
    <description>Recent content in Development on Pascal&#39;s dev blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](http://gohugo.io). All contents licensed under [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/)</copyright>
    <atom:link href="https://pascallemerrer.github.io/blog/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating a mobile application with React Native - part 2</title>
      <link>https://pascallemerrer.github.io/blog/post/react-native-2/</link>
      <pubDate>Sun, 28 Aug 2016 21:54:34 +0200</pubDate>
      
      <guid>https://pascallemerrer.github.io/blog/post/react-native-2/</guid>
      <description>&lt;p&gt;This article is the second in a series started with &lt;a href=&#34;https://pascallemerrer.github.io/blog/post/react-native-1/&#34;&gt;Creating a mobile application with React Native - part 1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today, we will enrich our basic app with a list of albums provided by the deezer API. We will use &lt;a href=&#34;http://nativebase.io&#34;&gt;Native Base&lt;/a&gt;, which is a complement to React Native. It provides higher level, polished components and layouts, for both iOS and Android.
&lt;/p&gt;

&lt;p&gt;With Native Base you have much less boilerplate code to write than with React Native alone. At first sight, it looks like a kind of &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Twitter Bootstrap&lt;/a&gt; for mobile development with React Native.&lt;/p&gt;

&lt;h2 id=&#34;install-native-base&#34;&gt;Install Native Base&lt;/h2&gt;

&lt;p&gt;First thing first, download NativeBase and add it to the dependencies in package.json:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; AwesomeNativeBase
npm install native-base --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, includeinto the app the icon fonts provided by React Native:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir android/apps/src/main/assets/fonts
cp node_modules/react-native-vector-icons/Fonts/*.ttf android/app/src/main/assets/fonts/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit &lt;code&gt;android/settings.gradle&lt;/code&gt; and add the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include &#39;:react-native-vector-icons&#39;
project(&#39;:react-native-vector-icons&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/react-native-vector-icons/android&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit &lt;code&gt;android/app/build.gradle&lt;/code&gt; and add the following line to the &lt;code&gt;dependencies&lt;/code&gt; node:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compile project(&#39;:react-native-vector-icons&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally build the app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-native-base-gui&#34;&gt;Create a Native Base GUI&lt;/h2&gt;

&lt;p&gt;Replace the content of &lt;code&gt;index.android.js&lt;/code&gt; with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span&gt;&lt;/span&gt;import React, { Component } from &amp;#39;react&amp;#39;;
import { AppRegistry } from &amp;#39;react-native&amp;#39;;
import { Content, Container, Header, Text, Title } from &amp;#39;native-base&amp;#39;;

class AwesomeNativeBase extends Component {
    render() {
        return (
            &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Albums&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;

                &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
                    Hello World!
                  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        );
    }
}

AppRegistry.registerComponent(&amp;#39;AwesomeNativeBase&amp;#39;, () =&amp;gt; AwesomeNativeBase);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The import directives list all the React, React Native and NativeBase components used.
Several React Native basic components are replaced by their Native Base counterparts in the render function.&lt;/p&gt;

&lt;p&gt;You should be able to run the app and see the &amp;ldquo;Hello World!&amp;rdquo; message under the header.
Refer to the &lt;a href=&#34;https://pascallemerrer.github.io/blog/post/react-native-1/&#34;&gt;first part&lt;/a&gt; if you need some explanation to run it.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://PascalLeMerrer.github.io/blog/post/img/react-native-2/screenshot_1.png&#34;  /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;create-the-albumlist-component&#34;&gt;Create the AlbumList component&lt;/h2&gt;

&lt;p&gt;Now let&amp;rsquo;s create a file named &lt;code&gt;albumlist.js&lt;/code&gt;, at the same level than &lt;code&gt;index.android.js&lt;/code&gt;. It will contain the description for a basic list component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ListItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;native-base&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AlbumList&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;albums&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dataArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;albums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;renderRow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ListItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/Text&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/ListItem&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/List&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The constructor is used to define the states of the component. At this stage, the list of albums is just a list of strings. The Native Base List component iterates on these strings and render a ListItem for each of them.&lt;/p&gt;

&lt;p&gt;Then change the content of &lt;code&gt;index.android.js&lt;/code&gt;, to include the AlbumList component:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 1 &lt;/span&gt;import React, { Component } from &amp;#39;react&amp;#39;;
&lt;span class=&#34;lineno&#34;&gt; 2 &lt;/span&gt;import { AppRegistry } from &amp;#39;react-native&amp;#39;;
&lt;span class=&#34;lineno&#34;&gt; 3 &lt;/span&gt;import { Button, Content, Container, Footer, Header, Icon, Title } from &amp;#39;native-base&amp;#39;;
&lt;span class=&#34;lineno&#34;&gt; 4 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 5 &lt;/span&gt;import AlbumList from &amp;#39;./albumlist&amp;#39;;
&lt;span class=&#34;lineno&#34;&gt; 6 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 7 &lt;/span&gt;class AwesomeNativeBase extends Component {
&lt;span class=&#34;lineno&#34;&gt; 8 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 9 &lt;/span&gt;    render() {
&lt;span class=&#34;lineno&#34;&gt;10 &lt;/span&gt;        return (
&lt;span class=&#34;lineno&#34;&gt;11 &lt;/span&gt;            &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;12 &lt;/span&gt;                &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;13 &lt;/span&gt;                   &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Albums&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;14 &lt;/span&gt;                &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;15 &lt;/span&gt;                &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;16 &lt;/span&gt;                  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;AlbumList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;17 &lt;/span&gt;                &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;18 &lt;/span&gt;            &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;19 &lt;/span&gt;        );
&lt;span class=&#34;lineno&#34;&gt;20 &lt;/span&gt;    }
&lt;span class=&#34;lineno&#34;&gt;21 &lt;/span&gt;}
&lt;span class=&#34;lineno&#34;&gt;22 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;23 &lt;/span&gt;AppRegistry.registerComponent(&amp;#39;AwesomeNativeBase&amp;#39;, () =&amp;gt; AwesomeNativeBase);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We imported the component (line 5), and replaced the content of the main container (line 16).
If you reload the app, it should look like this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://PascalLeMerrer.github.io/blog/post/img/react-native-2/screenshot_2.png&#34;  /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;install-superagent&#34;&gt;Install Superagent&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://facebook.github.io/react-native/docs/network.html&#34;&gt;Fetch&lt;/a&gt; is the default API in React Native for making HTTP requests. It&amp;rsquo;s still in experimental status, so maybe that&amp;rsquo;s why I had an annoying bug with it: the request was not executed unless I tap the device screen. So I replaced it with a more mature library, &lt;a href=&#34;http://visionmedia.github.io/superagent/&#34;&gt;Superagent&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Integrating Superagent in a ReactNative app is dead simple. First download it and add it to the dependencies of the project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install superagent --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you add this line to albumlist.js, just after the imports:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;superagent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;superagent&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s all! Now we are ready to make HTTP requests.&lt;/p&gt;

&lt;p&gt;Replace the constructor into &lt;code&gt;albumlist.js&lt;/code&gt; by these three functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kr&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;albums&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;componentDidMount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;superagent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http://api.deezer.com/album/&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;albumId&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/tracks&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
                  &lt;span class=&#34;nx&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                  &lt;span class=&#34;nx&#34;&gt;tracks&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
                  &lt;span class=&#34;nx&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will automatically make a request to the Deezer API in order to load a list of albums for the artist with id 27 (Daft Punk). The result of the request is then put in the &amp;ldquo;albums&amp;rdquo; state.&lt;/p&gt;

&lt;p&gt;During the request execution, the &amp;ldquo;loading&amp;rdquo; state is set to true to display the spinner.&lt;/p&gt;

&lt;p&gt;Note how we use ES6 arrow notation for the request callback (the parameter of the &lt;code&gt;end&lt;/code&gt; function). It allows us to use &lt;code&gt;this&lt;/code&gt; in the callback. We do not need to write something like &lt;code&gt;var self=this;&lt;/code&gt; and then using &lt;code&gt;self&lt;/code&gt; instead of &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now replace the render function with the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Spinner&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;#440099&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dataArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;albums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                  &lt;span class=&#34;nx&#34;&gt;renderRow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;
                      &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ListItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
                          &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Thumbnail&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;square&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cover_small&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;
                          &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/Text&amp;gt;&lt;/span&gt;
                      &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/ListItem&amp;gt;&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/List&amp;gt;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This new implementation displays a spinner during the request execution. After the response is received, it hides the spinner and replaces it with a list of albums, represented by their cover and title.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://PascalLeMerrer.github.io/blog/post/img/react-native-2/screenshot_3.png&#34;  /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The source code for the app is available &lt;a href=&#34;https://github.com/PascalLeMerrer/react-native-tuto/tree/step2&#34;&gt;on Github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;At this stage my feelings about React Native are mixed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it produces very easily a working application, and until now It did not require from me any knowledge about Android development (although it won&amp;rsquo;t prevent me to learn Google&amp;rsquo;s guidelines to create an app with a good UX);&lt;/li&gt;
&lt;li&gt;the Fetch API seems buggy;&lt;/li&gt;
&lt;li&gt;React error messages often left me without any clue about what is causing them;&lt;/li&gt;
&lt;li&gt;sometimes the error messages appears in the app, sometimes in the terminal running the packager (which I tend to forget as it runs in background) ; sometimes I even have to stop the packager to make the message appear in the app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To sum up, the result looks very good (by now), but the tooling is still immature, which is understandable for a rather young technology.&lt;/p&gt;

&lt;p&gt;This concludes the second part in this journey to discover React Native. In the next one, we&amp;rsquo;ll add a detailed view for each album.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating a mobile application with React Native - part 1</title>
      <link>https://pascallemerrer.github.io/blog/post/react-native-1/</link>
      <pubDate>Mon, 15 Aug 2016 00:18:02 +0200</pubDate>
      
      <guid>https://pascallemerrer.github.io/blog/post/react-native-1/</guid>
      <description>&lt;p&gt;These is the first post of a series dedicated to the creation of a mobile application for both Android and iOS.

Developing for both OS using their respective native technologies would require a lot of time, especially for me who doesn&amp;rsquo;t know them. I do not consider myself as a mobile developer, although I built a mobile game and some apps a few years ago using another multiplatform technology, Adobe Air. That&amp;rsquo;s why I will use React Native.&lt;/p&gt;

&lt;h2 id=&#34;what-is-react-native&#34;&gt;What is React Native?&lt;/h2&gt;

&lt;p&gt;React Native is a set of tools and a framework to create &lt;strong&gt;native&lt;/strong&gt; mobile application with Javascript, HTML and CSS.
This open source technology is developed mainly by Facebook, but they have succeeded in gathering a large community.&lt;/p&gt;

&lt;p&gt;According to me, React Native has a realistic approach of multiplatform development. First, it does not try to use the same UI components for both iOS and Android. Second, it uses native UI components, to provide a really nice user experience - this is where technologies using a webview for rendering, like Cordova or Ionic, usually show their limitations.&lt;/p&gt;

&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;

&lt;p&gt;I code using a Macbook. That&amp;rsquo;s my computer of choice for programming since a few yers ago (but definitely not for playing games^^). Moreover OSX is mandatory for creating iOS apps.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve got two Android phones: an Orange Nura running Android KitKat (4.4.2), and a Nexus 4 with Android Marshmallow (5.x). I will target the Android 4.4 phone first, assuming it will be easier to make the app running on more recent versions, than doing it the other way.&lt;/p&gt;

&lt;p&gt;My wife and I also have several iOS devices: iPhone 4 and 5, two iPads, with iOS versions ranging from 7 to 9. So I will try to make an app running on these devices, assuming React-Native allows it (I did not check it yet).&lt;/p&gt;

&lt;p&gt;I will focus on the Android version from now, and will come back later to iOS.&lt;/p&gt;

&lt;p&gt;NB: you may have to &lt;a href=&#34;http://www.androidcentral.com/how-enable-developer-settings-android-42&#34;&gt;activate the developer mode&lt;/a&gt; on your Android phone and allow USB debugging in the related menu.&lt;/p&gt;

&lt;h2 id=&#34;environment&#34;&gt;Environment&lt;/h2&gt;

&lt;h3 id=&#34;nodejs&#34;&gt;NodeJS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;NodeJS&lt;/a&gt; &amp;gt;= 4.0 and npm &amp;gt;= 3.0 are required.
Type &amp;ldquo;npm version&amp;rdquo; to check which versions you are running.&lt;/p&gt;

&lt;h3 id=&#34;install-the-android-sdk&#34;&gt;Install the Android SDK&lt;/h3&gt;

&lt;p&gt;Installing &lt;a href=&#34;https://developer.android.com/studio/index.html&#34;&gt;Android Studio&lt;/a&gt; seemed a bit heavy to me, but I did not find a link to download the Android SDK only. &lt;em&gt;Let me know if I missed something&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then I used Android Studio to install the SDKs:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Android Studio &amp;gt; Preferences &amp;gt; Apparence and Behavior &amp;gt; System Settings &amp;gt; Android SDK&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://PascalLeMerrer.github.io/blog/post/img/react-native-1/SDK1.png&#34;  /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://PascalLeMerrer.github.io/blog/post/img/react-native-1/SDK2.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s rather long, but once it&amp;rsquo;s done, you can close Android Studio.&lt;/p&gt;

&lt;h3 id=&#34;install-react-native&#34;&gt;Install React Native&lt;/h3&gt;

&lt;p&gt;To install React-Native on OSX for producing Android apps:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install node
brew install watchman
npm install -g react-native-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your OS is different, just follow the &lt;a href=&#34;https://facebook.github.io/react-native/docs/getting-started.html&#34;&gt;documentation provided by Facebook&lt;/a&gt;.
Display the instructions related to your environment, by selecting a mobile OS and a development OS:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://PascalLeMerrer.github.io/blog/post/img/react-native-1/install-react.png&#34;  /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;create-a-basic-application&#34;&gt;Create a basic application&lt;/h2&gt;

&lt;p&gt;At first you have to create a React Native application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;react-native init AwesomeNativeBase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will generate a basic app in a directory named AwesomeNativeBase.&lt;/p&gt;

&lt;h2 id=&#34;run-the-app-on-an-android-device&#34;&gt;Run the app on an Android device&lt;/h2&gt;

&lt;p&gt;In the terminal, type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;react-native run-android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I choose not to use an Android emulator, as it had a poor reputation a couple of years ago. &lt;em&gt;If it has improved, let me know&lt;/em&gt;. Moreover, I know from my own experience it’s better to test your application on a real device as soon as possible. No emulator is perfect.&lt;/p&gt;

&lt;p&gt;At the first launch I’ve got an error message on my device (an Android 4.4.2 phone):&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://PascalLeMerrer.github.io/blog/post/img/react-native-1/androidbug.png&#34;  /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re luckier than me, you may skip directly to the testing part.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I solved it by replacing the &amp;ldquo;scripts&amp;rdquo; node in the package.json file with the following lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;(cd android/ &amp;amp;&amp;amp; ./gradlew assembleDebug)&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;node node_modules/react-native/local-cli/cli.js start&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;bundle-android&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;react-native bundle --platform android --dev false --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --sourcemap-output android/app/src/main/assets/index.android.map --assets-dest android/app/src/main/res/&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This adds two commands that you can run to produce an app: &lt;code&gt;npm run build&lt;/code&gt; and &lt;code&gt;npm run bundle-android&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create the assets directory, then compile your application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir android/app/src/main/assets
npm run bundle-android
npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launch the react packager in another terminal and let it running as long as you work on your app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you have to copy your APK from `AwesomeNativeBase/android/app/build/outputs/apk to your phone.
To copy easily the file I use &lt;a href=&#34;https://android.com/filetransfer/&#34;&gt;Android File Transfer&lt;/a&gt;. Open it, then drop the APK in the destination folder.&lt;/p&gt;

&lt;p&gt;On your phone use an explorer to access the APK and tap it to start the installation.&lt;/p&gt;

&lt;p&gt;Your app should be up running!&lt;/p&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;Fortunately, you don&amp;rsquo;t have to go through this whole process each time you want to test your devs. In fact, and it&amp;rsquo;s a strong point in React Native, you just have to reload the app just after you saved a modification for getting the new version on your device.&lt;/p&gt;

&lt;p&gt;The first way to reload the app is to tap the menu button to open the developer menu
 and hit &amp;ldquo;reload&amp;rdquo;. This menu also offers a &amp;ldquo;live reload&amp;rdquo; feature, so you don&amp;rsquo;t even have to anually trigger the reloading (although it not always work).&lt;/p&gt;

&lt;p&gt;Before reloading the app, you must enter the IP address of your development computer. It must be reachable by the device (the easiest way being both of them are connected to the same local network through Wifi).&lt;/p&gt;

&lt;p&gt;Open the developer menu, select &amp;ldquo;Dev settings &amp;gt; Debug server host &amp;amp; port for device&amp;rdquo;, then enter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;192.168.x.y:8081
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8081 is the default port for the packager you should have launched with &amp;ldquo;npm run start&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was the hard part: installing the environment, and getting the application running on a real device. Now comes something more pleasant for me: developping the app. But that&amp;rsquo;s another story :)&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>